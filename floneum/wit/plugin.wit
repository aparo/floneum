package plugins:main;

interface imports {
  use types.{embedding, model, model-type, embedding-db, node, page};
  
  store: func(key: list<u8>, value: list<u8>);

  load: func(key: list<u8>) -> list<u8>;

  unload: func(key: list<u8>);

  log-to-user: func(information: string);
}

interface types {
  record header {
    key: string,
    value: string,
  }

  get-request: func(url: string, headers: list<header>) -> string;

  enum browser-mode {
    headless,
    headfull,
  }

  resource page {
    constructor(mode: browser-mode, url: string);
    find-in-current-page: func(selector: string) -> node;
    screenshot-browser: func() -> list<u8>;
    html: func() -> string;
  }

  resource node {
    get-element-text: func() -> string;
    click-element: func();
    type-into-element: func(keys: string);
    get-element-outer-html: func() -> string;
    screenshot-element: func() -> list<u8>;
    find-child-of-element: func(selector: string) -> node;
  }

  resource embedding-db {
    constructor(embeddings: list<embedding>, documents: list<string>);
    add-embedding: func(embedding: embedding, documents: string);
    find-closest-documents: func(search: embedding, count: u32) -> list<string>;
  }

  resource model {
    constructor(ty: model-type);
    model-downloaded: static func(ty: model-type) -> bool;
    infer: func(input: string, max-tokens: option<u32>, stop-on: option<string>) -> string;
    infer-structured: func(input: string, regex: string) -> string;
  }

  resource embedding-model {
    constructor(ty: embedding-model-type);
    model-downloaded: static func(ty: embedding-model-type) -> bool;
    get-embedding: func(document: string) -> embedding;
  }

  record embedding {
    vector: list<float32>
  }

  variant primitive-value {
    model(model),
    embedding-model(embedding-model),
    model-type(model-type),
    embedding-model-type(embedding-model-type),
    database(embedding-db),
    number(s64),
    float(f64),
    text(string),
    file(string),
    folder(string),
    embedding(embedding),
    boolean(bool),
    page(page),
    node(node)
  }

  variant value-type {
    single(primitive-value-type),
    many(primitive-value-type),
  }

  enum primitive-value-type {
    number,
    float,
    text,
    file,
    folder,
    embedding,
    database,
    model,
    embedding-model,
    model-type,
    embedding-model-type,
    boolean,
    page,
    node,
    any
  }

  record definition {
    name: string,
    description: string,
    inputs: list<io-definition>,
    outputs: list<io-definition>,
    examples: list<example>
  }

  record example {
    name: string,
    inputs: list<input>,
    outputs: list<output>,
  }

  record io-definition {
    name: string,
    ty: value-type,
  }

  variant input {
    single(primitive-value),
    many(list<primitive-value>),
  }

  variant output {
    single(primitive-value),
    many(list<primitive-value>),
    halt,
  }

  variant model-type {
    mistral-seven,
    mistral-seven-instruct,
    mistral-seven-instruct-two,
    zephyr-seven-alpha,
    zephyr-seven-beta,
    open-chat-seven,
    starling-seven-alpha,
    tiny-llama-chat,
    tiny-llama,
    llama-seven,
    llama-thirteen,
    llama-seventy,
    llama-seven-chat,
    llama-thirteen-chat,
    llama-seventy-chat,
    llama-seven-code,
    llama-thirteen-code,
    llama-thirty-four-code,
    solar-ten,
    solar-ten-instruct,
    phi-one,
    phi-one-point-five,
    phi-two,
    puffin-phi-two,
    dolphin-phi-two
  }
  variant embedding-model-type { bert }
}

interface definitions {
  use types.{definition, input, output};

  structure: func() -> definition;

  run: func(inputs: list<input>) -> list<output>;
}

world exports {
  import imports;
  import types;
}

world plugin-world {
  export definitions;
  import imports;
  import types;
}

world both {
  import imports;
  export definitions;
}
